import * as t from 'io-ts';
import * as jrpc from './protocol';
import * as peer from './peer';
export interface TypedHandlerFn<T extends t.Any = t.Any> {
    fn: (params: t.TypeOf<T>) => Promise<any> | any;
    paramsType: T;
}
export declare type DefaultNotificationHandler = (this: void, method: string, params: jrpc.RPCParams) => void;
export default class TypesafeRequestDispatcher {
    requestHandlers: Map<string, TypedHandlerFn<t.Type<any, any, any>>[]>;
    notificationHandlers: Map<string, TypedHandlerFn<t.Type<any, any, any>>[]>;
    defaultNotificationHandler: DefaultNotificationHandler;
    private static register<T>(collection, name, paramsType, impl);
    method<T extends t.Any>(name: string, paramsType: T, impl: (params: t.TypeOf<T>) => Promise<any> | any): this;
    notification<T extends t.Any>(name: string, paramsType: T, impl: (params: t.TypeOf<T>) => void): this;
    onRequest: peer.RequestHandler;
    onNotification: peer.NotificationHandler;
}
