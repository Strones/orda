var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
import BufferCursor from './BufferCursor';
import { TXIOutputFormat } from './types';
import TZ1200RLE from './TZ1200RLE';
var TextureFormat;
(function (TextureFormat) {
    TextureFormat[TextureFormat["A8"] = 524296] = "A8";
    TextureFormat[TextureFormat["BGR565"] = 17827173] = "BGR565";
    TextureFormat[TextureFormat["BGRA8888"] = 18909320] = "BGRA8888";
    TextureFormat[TextureFormat["ABGR6666"] = 35153510] = "ABGR6666";
    TextureFormat[TextureFormat["ABGR8888"] = 35686536] = "ABGR8888";
})(TextureFormat || (TextureFormat = {}));
var TXI_FILE_TYPE = 0x0A697874;
var TXI_FILE_VERSION = 0x20000028;
var TXI_HEADER_LENGTH = 40;
var INPUT_FORMAT_BPP = 4;
function rescaleColor(value, newMax) {
    return Math.round(value / 255 * newMax);
}
var pixelEncoders = (_a = {},
    _a[TextureFormat.A8] = function (_a) {
        var _b = __read(_a, 1), r = _b[0];
        return [r];
    },
    _a[TextureFormat.BGRA8888] = function (_a) {
        var _b = __read(_a, 4), r = _b[0], g = _b[1], b = _b[2], a = _b[3];
        return [b, g, r, a];
    },
    _a[TextureFormat.ABGR8888] = function (_a) {
        var _b = __read(_a, 4), r = _b[0], g = _b[1], b = _b[2], a = _b[3];
        return [a, b, g, r];
    },
    _a[TextureFormat.BGR565] = function (_a) {
        var _b = __read(_a, 3), r8 = _b[0], g8 = _b[1], b8 = _b[2];
        var r5 = rescaleColor(r8, 31);
        var g6 = rescaleColor(g8, 63);
        var b5 = rescaleColor(b8, 31);
        return [
            0xFF & ((g6 << 5) | b5),
            0xFF & ((g6 >> 3) | (r5 << 3)),
        ];
    },
    _a[TextureFormat.ABGR6666] = function (pixel) {
        if (pixel[3] === 0)
            return [0, 0, 0];
        var _a = __read(pixel.map(function (channel) { return rescaleColor(channel, 63); }), 4), r = _a[0], g = _a[1], b = _a[2], a = _a[3];
        return [
            0xFF & ((b << 6) | a),
            0xFF & ((g << 4) | (b >> 2)),
            0xFF & ((r << 2) | (g >> 4)),
        ];
    },
    _a);
function findTextureFormat(outputFormat, rle) {
    if (outputFormat === TXIOutputFormat.RGBA8888) {
        return rle ? TextureFormat.ABGR8888 : TextureFormat.BGRA8888;
    }
    switch (outputFormat) {
        case TXIOutputFormat.A8: return TextureFormat.A8;
        case TXIOutputFormat.RGB565: return TextureFormat.BGR565;
        case TXIOutputFormat.RGBA6666: return TextureFormat.ABGR6666;
    }
    throw new Error("No known texture format for TXI output format " + outputFormat);
}
function arrayBufferConcat(buffers) {
    var totalLength = buffers.reduce(function (acc, buf) { return acc + buf.byteLength; }, 0);
    var combined = new Uint8Array(totalLength);
    var offset = 0;
    try {
        for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
            var buf = buffers_1_1.value;
            combined.set(new Uint8Array(buf), offset);
            offset += buf.byteLength;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return combined.buffer;
    var e_1, _a;
}
var TXIEncoder = (function () {
    function TXIEncoder(image) {
        this.image = image;
    }
    TXIEncoder.prototype.emit = function (pixel) {
        var packed = this.rle ? this.rle.encode(pixel) : pixel;
        if (packed)
            this.cursor.writeUInt8Array(packed);
    };
    TXIEncoder.prototype.rows = function () {
        var y;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    y = 0;
                    _a.label = 1;
                case 1:
                    if (!(y < this.height)) return [3, 4];
                    return [4, this.row(y)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    y += 1;
                    return [3, 1];
                case 4:
                    if (!!this.rle) return [3, 6];
                    return [4, this.row(this.height - 1)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6: return [2];
            }
        });
    };
    TXIEncoder.prototype.row = function (y) {
        var packed, x, offset, pixel;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    x = 0;
                    _a.label = 1;
                case 1:
                    if (!(x < this.width)) return [3, 4];
                    offset = ((this.width * y) + x) * INPUT_FORMAT_BPP;
                    pixel = this.image.data.slice(offset, offset + INPUT_FORMAT_BPP);
                    packed = pixelEncoders[this.textureFormat](pixel);
                    return [4, packed];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    x += 1;
                    return [3, 1];
                case 4:
                    if (!(!this.rle && packed)) return [3, 6];
                    return [4, packed];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6: return [2];
            }
        });
    };
    Object.defineProperty(TXIEncoder.prototype, "width", {
        get: function () {
            return this.image.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TXIEncoder.prototype, "height", {
        get: function () {
            return this.image.height;
        },
        enumerable: true,
        configurable: true
    });
    TXIEncoder.prototype.buildHeader = function (imageDataLen) {
        var formatType = this.textureFormat;
        if (this.rle)
            formatType |= 268435456;
        var headerArray = [
            TXI_FILE_TYPE,
            TXI_FILE_VERSION,
            imageDataLen,
            0,
            formatType,
            this.rle ? 0 : 1,
            this.width,
            this.height,
            imageDataLen,
            0xDEADBEEF,
        ];
        var cursor = new BufferCursor(TXI_HEADER_LENGTH);
        cursor.writeUInt32LEArray(headerArray);
        return cursor.buffer;
    };
    TXIEncoder.prototype.maxOutputSize = function (bytesPerPixel) {
        var maxBytesWithRLE = this.width * this.height * (bytesPerPixel + 1);
        var maxBytesWithoutRLE = ((this.width + 1) * (this.height + 1) * bytesPerPixel) + ((this.height + 1) * 3);
        return this.rle ? maxBytesWithRLE : maxBytesWithoutRLE;
    };
    TXIEncoder.prototype.encode = function (_a) {
        var rle = _a.rle, outputFormat = _a.outputFormat;
        this.textureFormat = findTextureFormat(outputFormat, rle);
        var bytesPerPixel = pixelEncoders[this.textureFormat](new Uint8ClampedArray([0, 0, 0, 0])).length;
        this.rle = rle ? new TZ1200RLE(bytesPerPixel) : undefined;
        this.cursor = new BufferCursor(this.maxOutputSize(bytesPerPixel));
        try {
            for (var _b = __values(this.rows()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var row = _c.value;
                try {
                    for (var row_1 = __values(row), row_1_1 = row_1.next(); !row_1_1.done; row_1_1 = row_1.next()) {
                        var pixel = row_1_1.value;
                        this.emit(pixel);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (row_1_1 && !row_1_1.done && (_d = row_1.return)) _d.call(row_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                if (!this.rle)
                    this.cursor.seek((this.cursor.tell() + 3) & ~3);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (this.rle) {
            var leftovers = this.rle.flush();
            if (leftovers)
                this.cursor.writeUInt8Array(leftovers);
        }
        var imageDataBuf = this.cursor.slice();
        var headerBuf = this.buildHeader(imageDataBuf.byteLength);
        return arrayBufferConcat([headerBuf, imageDataBuf]);
        var e_3, _e, e_2, _d;
    };
    return TXIEncoder;
}());
export function encode(image, options) {
    var outputFormat = options.outputFormat || TXIOutputFormat.RGBA8888;
    var encoder = new TXIEncoder(image);
    if (options.rle !== 'auto') {
        return encoder.encode({
            outputFormat: outputFormat,
            rle: !!options.rle,
        });
    }
    var withoutRLE = encoder.encode({ outputFormat: outputFormat, rle: false });
    var withRLE = encoder.encode({ outputFormat: outputFormat, rle: true });
    return withoutRLE.byteLength > withRLE.byteLength ? withRLE : withoutRLE;
}
var _a;
