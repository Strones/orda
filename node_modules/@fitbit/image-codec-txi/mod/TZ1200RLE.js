var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
function comparePixel(a, b) {
    if (!a || !b)
        return false;
    for (var i = 0; i < a.length; i += 1) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
var MAX_SECTION_LENGTH = 127;
var TZ1200RLE = (function () {
    function TZ1200RLE(bytesPerPixel) {
        this.pixelCount = 0;
        this.sectionIndex = 1;
        this.willCompress = false;
        this.section = new Uint8ClampedArray((MAX_SECTION_LENGTH * bytesPerPixel) + 1);
    }
    TZ1200RLE.prototype.writePixelToSection = function (pixel) {
        try {
            for (var pixel_1 = __values(pixel), pixel_1_1 = pixel_1.next(); !pixel_1_1.done; pixel_1_1 = pixel_1.next()) {
                var byte = pixel_1_1.value;
                this.section[this.sectionIndex] = byte;
                this.sectionIndex += 1;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pixel_1_1 && !pixel_1_1.done && (_a = pixel_1.return)) _a.call(pixel_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.pixelCount += 1;
        var e_1, _a;
    };
    Object.defineProperty(TZ1200RLE.prototype, "isSectionFull", {
        get: function () {
            return this.pixelCount === MAX_SECTION_LENGTH;
        },
        enumerable: true,
        configurable: true
    });
    TZ1200RLE.prototype.flush = function () {
        if (!this.willCompress && this.lastPixel) {
            this.writePixelToSection(this.lastPixel);
        }
        return this.internalFlush();
    };
    TZ1200RLE.prototype.internalFlush = function () {
        var out = null;
        if (this.pixelCount > 0) {
            out = new Uint8Array(this.section.slice(0, this.sectionIndex));
            out[0] = this.willCompress ? (MAX_SECTION_LENGTH + 1) : 0;
            out[0] |= this.pixelCount & MAX_SECTION_LENGTH;
        }
        this.pixelCount = 0;
        this.sectionIndex = 1;
        return out;
    };
    TZ1200RLE.prototype.encode = function (pixel) {
        var out = null;
        if (this.willCompress) {
            if (comparePixel(pixel, this.lastPixel)) {
                this.pixelCount += 1;
                if (this.isSectionFull) {
                    out = this.internalFlush();
                    this.willCompress = false;
                    this.lastPixel = undefined;
                }
            }
            else {
                out = this.internalFlush();
                this.willCompress = false;
                this.lastPixel = pixel;
            }
        }
        else if (this.lastPixel && comparePixel(pixel, this.lastPixel)) {
            out = this.internalFlush();
            this.willCompress = true;
            this.sectionIndex = 1;
            this.writePixelToSection(this.lastPixel);
            this.pixelCount = 2;
        }
        else {
            if (this.lastPixel)
                this.writePixelToSection(this.lastPixel);
            if (this.isSectionFull)
                out = this.internalFlush();
            this.lastPixel = pixel;
        }
        return out;
    };
    return TZ1200RLE;
}());
export default TZ1200RLE;
