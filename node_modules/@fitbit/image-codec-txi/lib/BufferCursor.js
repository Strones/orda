"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var BufferCursor = (function () {
    function BufferCursor(length) {
        this.length = length;
        this.p = 0;
        this.buffer = new ArrayBuffer(length);
        this.view = new DataView(this.buffer);
    }
    BufferCursor.prototype.seek = function (offset) {
        this.p = offset;
    };
    BufferCursor.prototype.tell = function () {
        return this.p;
    };
    BufferCursor.prototype.slice = function (from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = this.tell(); }
        return this.buffer.slice(from, to);
    };
    BufferCursor.prototype.writeUInt8Array = function (arr) {
        try {
            for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
                var byte = arr_1_1.value;
                this.view.setUint8(this.p, byte);
                this.p += 1;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    BufferCursor.prototype.writeUInt32LEArray = function (arr) {
        try {
            for (var arr_2 = __values(arr), arr_2_1 = arr_2.next(); !arr_2_1.done; arr_2_1 = arr_2.next()) {
                var val = arr_2_1.value;
                this.view.setUint32(this.p, val, true);
                this.p += 4;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (arr_2_1 && !arr_2_1.done && (_a = arr_2.return)) _a.call(arr_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _a;
    };
    return BufferCursor;
}());
exports.default = BufferCursor;
