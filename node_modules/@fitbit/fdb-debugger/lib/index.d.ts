/// <reference types="node" />
import { EventEmitter } from 'events';
import * as stream from 'stream';
import * as t from 'io-ts';
import { Peer, TypesafeRequestDispatcher } from '@fitbit/jsonrpc-ts';
import { BulkData, FDBTypes } from '@fitbit/fdb-protocol';
export interface RemoteHostOptions {
    userAgentSuffix?: string;
}
export interface ConsoleMessage {
    timestamp?: Date;
    emittedBy: FDBTypes.AppComponent;
    fromHost?: boolean;
    position?: FDBTypes.Position;
    kind: 'log' | 'info' | 'warn' | 'error';
    message: any[];
}
export interface ConsoleTrace {
    timestamp?: Date;
    emittedBy: FDBTypes.AppComponent;
    stack: FDBTypes.Position[];
    kind: 'trace' | 'assert' | 'exception';
    message: any[];
}
export declare class RemoteHost extends EventEmitter {
    static readonly CAPABILITIES: {
        protocol: {
            maxMessageSize: number;
        };
        console: {
            appLogging: boolean;
        };
        io: {
            write: boolean;
        };
    };
    static readonly USER_AGENT: string;
    dispatcher: TypesafeRequestDispatcher;
    rpc: Peer;
    info: FDBTypes.InitializeResult;
    epoch: Date;
    timeout: number;
    protected bulkDataStreams: BulkData;
    private screenshotStreams;
    protected constructor(timeout: number);
    static connect(hostStream: stream.Duplex, {userAgentSuffix, timeout}?: {
        userAgentSuffix?: string;
        timeout?: number;
    }): Promise<RemoteHost>;
    convertTimestamp(relativeTS: number): Date;
    handleMessage: (params: t.TypeOfPartialProps<{
        timestamp: t.NumberType;
        position: t.IntersectionType<[t.InterfaceType<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>, t.PartialType<{
                generated: t.BooleanType;
                name: t.StringType;
            }, t.TypeOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.OutputOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.mixed>], t.TypeOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.TypeOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.OutputOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.OutputOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.mixed>;
        fromHost: t.BooleanType;
    }> & t.TypeOfProps<{
        emittedBy: t.UnionType<(t.IntersectionType<[t.InterfaceType<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }, t.TypeOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.OutputOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.mixed>, t.InterfaceType<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }, t.TypeOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.OutputOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.mixed>], t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.mixed> | t.PartialType<{
            hostID: t.StringType;
        }, t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>)[], (t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, (t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>;
        kind: t.UnionType<(t.LiteralType<"log"> | t.LiteralType<"info"> | t.LiteralType<"warn"> | t.LiteralType<"error">)[], "error" | "log" | "info" | "warn", "error" | "log" | "info" | "warn", t.mixed>;
        message: t.ArrayType<t.AnyType, any[], any[], t.mixed>;
    }>) => void;
    handleTrace: (params: t.TypeOfProps<{
        emittedBy: t.UnionType<(t.IntersectionType<[t.InterfaceType<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }, t.TypeOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.OutputOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.mixed>, t.InterfaceType<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }, t.TypeOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.OutputOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.mixed>], t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.mixed> | t.PartialType<{
            hostID: t.StringType;
        }, t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>)[], (t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, (t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>;
        stack: t.ArrayType<t.IntersectionType<[t.InterfaceType<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>, t.PartialType<{
                generated: t.BooleanType;
                name: t.StringType;
            }, t.TypeOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.OutputOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.mixed>], t.TypeOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.TypeOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.OutputOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.OutputOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.mixed>, (t.TypeOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.TypeOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>)[], (t.OutputOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.OutputOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>)[], t.mixed>;
        kind: t.UnionType<(t.LiteralType<"trace"> | t.LiteralType<"assert"> | t.LiteralType<"exception">)[], "trace" | "assert" | "exception", "trace" | "assert" | "exception", t.mixed>;
        message: t.ArrayType<t.AnyType, any[], any[], t.mixed>;
    }> & t.TypeOfPartialProps<{
        timestamp: t.NumberType;
    }>) => void;
    handleAppRunning: (params: t.TypeOfProps<{
        uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
        buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
    }>) => void;
    handleAppClosed: (params: t.TypeOfProps<{
        uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
        buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
    }>) => void;
    hasCapability(path: string): boolean;
    readonly maxMessageSize: number;
    protected bindMethod<P extends t.Any, R extends t.Any>(method: string, paramsType: P, resultType: R, {timeoutEnabled, minTimeout}?: {
        timeoutEnabled?: boolean;
        minTimeout?: number;
    }): (params: t.TypeOf<P>) => Promise<t.TypeOf<R>>;
    private initialize;
    ping: () => Promise<void>;
    protected ioWrite: (params: t.TypeOfProps<{
        stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, t.mixed>)[], string | number, string | number, t.mixed>;
        data: t.StringType;
    }> & t.TypeOfPartialProps<{
        encoding: t.StringType;
    }>) => Promise<any>;
    protected beginStreamingInstall: (params: t.TypeOfProps<{
        componentBundle: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion">)[], "app" | "companion", "app" | "companion", t.mixed>;
    }>) => Promise<t.TypeOfProps<{
        stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, t.mixed>)[], string | number, string | number, t.mixed>;
    }>>;
    protected finalizeStreamingInstall: (params: t.TypeOfProps<{
        stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, t.mixed>)[], string | number, string | number, t.mixed>;
    }>) => Promise<t.TypeOfProps<{
        app: t.InterfaceType<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }, t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.mixed>;
        components: t.ArrayType<t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>, ("app" | "companion" | "settings")[], ("app" | "companion" | "settings")[], t.mixed>;
    }>>;
    protected abortStreamingInstall: (params: t.TypeOfProps<{
        stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, t.mixed>)[], string | number, string | number, t.mixed>;
    }>) => Promise<any>;
    launchAppComponent: (params: t.TypeOfProps<{
        uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
        component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
    }>) => Promise<t.TypeOfProps<{
        uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
        buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
    }> & t.TypeOfProps<{
        component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
    }>>;
    protected writeToStream(stream: FDBTypes.StreamToken, data: Buffer, {onProgress}?: {
        onProgress?: (bytesWritten: number, totalBytes: number) => void;
    }): Promise<void>;
    installApp(componentBundle: 'app' | 'companion', data: Buffer, {onProgress}?: {
        onProgress?: (bytesWritten: number, totalBytes: number) => void;
    }): Promise<t.TypeOfProps<{
        app: t.InterfaceType<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }, t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.mixed>;
        components: t.ArrayType<t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>, ("app" | "companion" | "settings")[], ("app" | "companion" | "settings")[], t.mixed>;
    }>>;
    protected beginStreamingScreenshotCapture: (params: t.TypeOfProps<{
        stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, t.mixed>)[], string | number, string | number, t.mixed>;
        imageFormat: t.StringType;
    }>) => Promise<t.TypeOfPartialProps<{
        length: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
    }>>;
    canTakeScreenshot(): boolean;
    screenshotFormats(): string[];
    takeScreenshot(format: string, onWrite?: (received: number, total?: number) => void): Promise<Buffer>;
    private popScreenshotContext(token);
    private handleScreenshotFinalize;
    private handleScreenshotAbort;
    private sendEvalCmd;
    hasEvalSupport(): boolean;
    eval(cmd: string): Promise<t.TypeOfProps<{
        success: t.LiteralType<true>;
        value: t.StringType;
    }> | t.TypeOfProps<{
        success: t.LiteralType<false>;
    }>>;
}
