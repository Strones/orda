/// <reference types="node" />
import { EventEmitter } from 'events';
import * as stream from 'stream';
import * as t from 'io-ts';
import { Peer, TypesafeRequestDispatcher } from '@fitbit/jsonrpc-ts';
import { BulkData, FDBTypes } from '@fitbit/fdb-protocol';
export interface HostInfo {
    device: string;
    hostKind: 'device' | 'companion';
    maxMessageSize?: number;
}
export interface InstallOptions {
    appBundle?: boolean;
    companionBundle?: boolean;
    appCompatibility?: FDBTypes.AppHostDescriptor[];
    companionCompatibility?: FDBTypes.CompanionHostDescriptor;
}
export declare class Host extends EventEmitter {
    capabilities: FDBTypes.HostCapabilities;
    dispatcher: TypesafeRequestDispatcher;
    rpc: Peer;
    info?: FDBTypes.InitializeParams;
    epoch: Date;
    timeout: number;
    private installHandler?;
    private hostInfo;
    protected bulkDataStreams: BulkData;
    private appInstallStream?;
    protected constructor(hostInfo: HostInfo, timeout: number);
    static create(debuggerStream: stream.Duplex, hostInfo: HostInfo, {timeout}?: {
        timeout?: number;
    }): Host;
    setInstallHandler: (installHandler: (appData: Buffer) => t.TypeOfProps<{
        app: t.InterfaceType<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }, t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.mixed>;
        components: t.ArrayType<t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>, ("app" | "companion" | "settings")[], ("app" | "companion" | "settings")[], t.mixed>;
    }> | Promise<t.TypeOfProps<{
        app: t.InterfaceType<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }, t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.mixed>;
        components: t.ArrayType<t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>, ("app" | "companion" | "settings")[], ("app" | "companion" | "settings")[], t.mixed>;
    }>>, installOptions?: InstallOptions | undefined) => void;
    handleInitialize: (params: t.TypeOfProps<{
        capabilities: t.PartialType<{
            protocol: t.PartialType<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>;
            io: t.PartialType<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }, t.TypeOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.OutputOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.mixed>;
            console: t.PartialType<{
                appLogging: t.BooleanType;
            }, t.TypeOfPartialProps<{
                appLogging: t.BooleanType;
            }>, t.OutputOfPartialProps<{
                appLogging: t.BooleanType;
            }>, t.mixed>;
            experimental: t.AnyType;
        }, t.TypeOfPartialProps<{
            protocol: t.PartialType<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>;
            io: t.PartialType<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }, t.TypeOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.OutputOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.mixed>;
            console: t.PartialType<{
                appLogging: t.BooleanType;
            }, t.TypeOfPartialProps<{
                appLogging: t.BooleanType;
            }>, t.OutputOfPartialProps<{
                appLogging: t.BooleanType;
            }>, t.mixed>;
            experimental: t.AnyType;
        }>, t.OutputOfPartialProps<{
            protocol: t.PartialType<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>;
            io: t.PartialType<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }, t.TypeOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.OutputOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.mixed>;
            console: t.PartialType<{
                appLogging: t.BooleanType;
            }, t.TypeOfPartialProps<{
                appLogging: t.BooleanType;
            }>, t.OutputOfPartialProps<{
                appLogging: t.BooleanType;
            }>, t.mixed>;
            experimental: t.AnyType;
        }>, t.mixed>;
    }> & t.TypeOfPartialProps<{
        userAgent: t.StringType;
    }>) => {
        device: string;
        hostKind: "companion" | "device";
        capabilities: t.TypeOfPartialProps<{
            protocol: t.PartialType<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfPartialProps<{
                batchRequest: t.BooleanType;
                maxMessageSize: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>;
            io: t.PartialType<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }, t.TypeOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.OutputOfPartialProps<{
                write: t.BooleanType;
                additionalEncodings: t.ArrayType<t.StringType, string[], string[], t.mixed>;
            }>, t.mixed>;
            appHost: t.PartialType<{
                install: t.PartialType<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }, t.TypeOfPartialProps<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }>, t.OutputOfPartialProps<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }>, t.mixed>;
                launch: t.PartialType<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }, t.TypeOfPartialProps<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }>, t.OutputOfPartialProps<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }>, t.mixed>;
                screenshot: t.IntersectionType<[t.PartialType<{
                        stream: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        stream: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        stream: t.BooleanType;
                    }>, t.mixed>, t.InterfaceType<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }, t.TypeOfProps<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }>, t.mixed>], t.TypeOfPartialProps<{
                    stream: t.BooleanType;
                }> & t.TypeOfProps<{
                    imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                }>, t.OutputOfPartialProps<{
                    stream: t.BooleanType;
                }> & t.OutputOfProps<{
                    imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                }>, t.mixed>;
            }, t.TypeOfPartialProps<{
                install: t.PartialType<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }, t.TypeOfPartialProps<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }>, t.OutputOfPartialProps<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }>, t.mixed>;
                launch: t.PartialType<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }, t.TypeOfPartialProps<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }>, t.OutputOfPartialProps<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }>, t.mixed>;
                screenshot: t.IntersectionType<[t.PartialType<{
                        stream: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        stream: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        stream: t.BooleanType;
                    }>, t.mixed>, t.InterfaceType<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }, t.TypeOfProps<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }>, t.mixed>], t.TypeOfPartialProps<{
                    stream: t.BooleanType;
                }> & t.TypeOfProps<{
                    imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                }>, t.OutputOfPartialProps<{
                    stream: t.BooleanType;
                }> & t.OutputOfProps<{
                    imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                }>, t.mixed>;
            }>, t.OutputOfPartialProps<{
                install: t.PartialType<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }, t.TypeOfPartialProps<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }>, t.OutputOfPartialProps<{
                    sideloadStream: t.BooleanType;
                    appBundle: t.BooleanType;
                    companionBundle: t.BooleanType;
                    appCompatibility: t.ArrayType<t.IntersectionType<[t.PartialType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>, t.InterfaceType<{
                            family: t.StringType;
                            version: t.StringType;
                        }, t.TypeOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.OutputOfProps<{
                            family: t.StringType;
                            version: t.StringType;
                        }>, t.mixed>], t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>, t.mixed>, (t.TypeOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.TypeOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], (t.OutputOfPartialProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }> & t.OutputOfProps<{
                        family: t.StringType;
                        version: t.StringType;
                    }>)[], t.mixed>;
                    companionCompatibility: t.IntersectionType<[t.InterfaceType<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }, t.TypeOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.OutputOfProps<{
                            maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                        }>, t.mixed>, t.PartialType<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }, t.TypeOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.OutputOfPartialProps<{
                            exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                        }>, t.mixed>], t.TypeOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.TypeOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        maxAPIVersion: t.RefinementType<t.Type<string, string, t.mixed>, string, string, t.mixed>;
                    }> & t.OutputOfPartialProps<{
                        exactAPIVersion: t.ArrayType<t.Type<string, string, t.mixed>, string[], string[], t.mixed>;
                    }>, t.mixed>;
                }>, t.mixed>;
                launch: t.PartialType<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }, t.TypeOfPartialProps<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }>, t.OutputOfPartialProps<{
                    appComponent: t.PartialType<{
                        canLaunch: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        canLaunch: t.BooleanType;
                    }>, t.mixed>;
                }>, t.mixed>;
                screenshot: t.IntersectionType<[t.PartialType<{
                        stream: t.BooleanType;
                    }, t.TypeOfPartialProps<{
                        stream: t.BooleanType;
                    }>, t.OutputOfPartialProps<{
                        stream: t.BooleanType;
                    }>, t.mixed>, t.InterfaceType<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }, t.TypeOfProps<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }>, t.OutputOfProps<{
                        imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                    }>, t.mixed>], t.TypeOfPartialProps<{
                    stream: t.BooleanType;
                }> & t.TypeOfProps<{
                    imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                }>, t.OutputOfPartialProps<{
                    stream: t.BooleanType;
                }> & t.OutputOfProps<{
                    imageFormats: t.ArrayType<t.StringType, string[], string[], t.mixed>;
                }>, t.mixed>;
            }>, t.mixed>;
            experimental: t.AnyType;
        }>;
    };
    handleAppInstallBegin: (params: t.TypeOfProps<{
        componentBundle: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion">)[], "app" | "companion", "app" | "companion", t.mixed>;
    }>) => {
        stream: string | number;
    };
    validateAppInstallStream(stream: FDBTypes.StreamToken): void;
    handleAppInstallFinalize: ({ stream }: t.TypeOfProps<{
        stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, t.mixed>)[], string | number, string | number, t.mixed>;
    }>) => Promise<t.TypeOfProps<{
        app: t.InterfaceType<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }, t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }>, t.mixed>;
        components: t.ArrayType<t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>, ("app" | "companion" | "settings")[], ("app" | "companion" | "settings")[], t.mixed>;
    }>>;
    handleAppInstallAbort: ({ stream }: t.TypeOfProps<{
        stream: t.UnionType<(t.StringType | t.RefinementType<t.NumberType, number, number, t.mixed>)[], string | number, string | number, t.mixed>;
    }>) => void;
    ping: (timeout?: number) => Promise<void>;
    consoleMessage: (args: t.TypeOfPartialProps<{
        timestamp: t.NumberType;
        position: t.IntersectionType<[t.InterfaceType<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>, t.PartialType<{
                generated: t.BooleanType;
                name: t.StringType;
            }, t.TypeOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.OutputOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.mixed>], t.TypeOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.TypeOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.OutputOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.OutputOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.mixed>;
        fromHost: t.BooleanType;
    }> & t.TypeOfProps<{
        emittedBy: t.UnionType<(t.IntersectionType<[t.InterfaceType<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }, t.TypeOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.OutputOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.mixed>, t.InterfaceType<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }, t.TypeOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.OutputOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.mixed>], t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.mixed> | t.PartialType<{
            hostID: t.StringType;
        }, t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>)[], (t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, (t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>;
        kind: t.UnionType<(t.LiteralType<"log"> | t.LiteralType<"info"> | t.LiteralType<"warn"> | t.LiteralType<"error">)[], "error" | "log" | "info" | "warn", "error" | "log" | "info" | "warn", t.mixed>;
        message: t.ArrayType<t.AnyType, any[], any[], t.mixed>;
    }>) => void;
    consoleTrace: (args: t.TypeOfProps<{
        emittedBy: t.UnionType<(t.IntersectionType<[t.InterfaceType<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }, t.TypeOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.OutputOfProps<{
                uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
                buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
            }>, t.mixed>, t.InterfaceType<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }, t.TypeOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.OutputOfProps<{
                component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
            }>, t.mixed>], t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>, t.mixed> | t.PartialType<{
            hostID: t.StringType;
        }, t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>)[], (t.TypeOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.TypeOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.TypeOfPartialProps<{
            hostID: t.StringType;
        }>, (t.OutputOfProps<{
            uuid: t.RefinementType<t.StringType, string, string, t.mixed>;
            buildID: t.RefinementType<t.StringType, string, string, t.mixed>;
        }> & t.OutputOfProps<{
            component: t.UnionType<(t.LiteralType<"app"> | t.LiteralType<"companion"> | t.LiteralType<"settings">)[], "app" | "companion" | "settings", "app" | "companion" | "settings", t.mixed>;
        }>) | t.OutputOfPartialProps<{
            hostID: t.StringType;
        }>, t.mixed>;
        stack: t.ArrayType<t.IntersectionType<[t.InterfaceType<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }, t.TypeOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.OutputOfProps<{
                source: t.RefinementType<t.StringType, string, string, t.mixed>;
                line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
                column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            }>, t.mixed>, t.PartialType<{
                generated: t.BooleanType;
                name: t.StringType;
            }, t.TypeOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.OutputOfPartialProps<{
                generated: t.BooleanType;
                name: t.StringType;
            }>, t.mixed>], t.TypeOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.TypeOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.OutputOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.OutputOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>, t.mixed>, (t.TypeOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.TypeOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>)[], (t.OutputOfProps<{
            source: t.RefinementType<t.StringType, string, string, t.mixed>;
            line: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
            column: t.RefinementType<t.RefinementType<t.NumberType, number, number, t.mixed>, number, number, t.mixed>;
        }> & t.OutputOfPartialProps<{
            generated: t.BooleanType;
            name: t.StringType;
        }>)[], t.mixed>;
        kind: t.UnionType<(t.LiteralType<"trace"> | t.LiteralType<"assert"> | t.LiteralType<"exception">)[], "trace" | "assert" | "exception", "trace" | "assert" | "exception", t.mixed>;
        message: t.ArrayType<t.AnyType, any[], any[], t.mixed>;
    }> & t.TypeOfPartialProps<{
        timestamp: t.NumberType;
    }>) => void;
}
