"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const stream_1 = require("stream");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const vinyl_1 = tslib_1.__importDefault(require("vinyl"));
const buildTargets_1 = tslib_1.__importDefault(require("./buildTargets"));
const pathUtils_1 = require("./pathUtils");
const sdkVersion_1 = require("./sdkVersion");
const manifestPath = 'manifest.json';
function appPackageManifest({ projectConfig, buildId, hasCompanion }) {
    const sourceMaps = {};
    const stream = new stream_1.Transform({
        objectMode: true,
        transform(file, _, next) {
            if (file.componentMapKey) {
                lodash_1.default.merge(sourceMaps, lodash_1.default.set({}, file.componentMapKey, pathUtils_1.normalizeToPOSIX(file.relative)));
            }
            next(undefined, file);
        },
        flush(callback) {
            const manifestJSON = JSON.stringify({
                buildId,
                sourceMaps,
                manifestVersion: 6,
                components: {
                    watch: lodash_1.default.fromPairs(projectConfig.buildTargets.map(platform => [
                        platform,
                        {
                            filename: `device-${platform}.zip`,
                            platform: buildTargets_1.default[platform].platform,
                        },
                    ])),
                    companion: hasCompanion ? { filename: 'companion.zip' } : undefined,
                },
                sdkVersion: Object.assign({ deviceApi: sdkVersion_1.apiVersions(projectConfig).deviceApi }, (hasCompanion && { companionApi: sdkVersion_1.apiVersions(projectConfig).companionApi })),
                requestedPermissions: projectConfig.requestedPermissions,
                appId: projectConfig.appUUID,
            }, undefined, 2);
            stream.push(new vinyl_1.default({
                contents: Buffer.from(manifestJSON, 'utf8'),
                path: path_1.default.resolve(process.cwd(), manifestPath),
            }));
            callback();
        },
    });
    return stream;
}
exports.default = appPackageManifest;
