"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const rollup_plugin_babel_1 = tslib_1.__importDefault(require("rollup-plugin-babel"));
const rollup_plugin_commonjs_1 = tslib_1.__importDefault(require("rollup-plugin-commonjs"));
const rollup_plugin_json_1 = tslib_1.__importDefault(require("rollup-plugin-json"));
const rollup_plugin_node_resolve_1 = tslib_1.__importDefault(require("rollup-plugin-node-resolve"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const diagnostics_1 = require("./diagnostics");
const rollupToVinyl_1 = tslib_1.__importDefault(require("./rollupToVinyl"));
const sdkVersion_1 = tslib_1.__importDefault(require("./sdkVersion"));
const brokenImports_1 = tslib_1.__importDefault(require("./plugins/brokenImports"));
const forbidAbsoluteImport_1 = tslib_1.__importDefault(require("./plugins/forbidAbsoluteImport"));
const resourceImports_1 = tslib_1.__importDefault(require("./plugins/resourceImports"));
const typescript_2 = tslib_1.__importDefault(require("./plugins/typescript"));
const tsconfigOverride = {
    noEmitHelpers: false,
    importHelpers: true,
    noResolve: false,
    noEmit: false,
    inlineSourceMap: false,
    moduleResolution: typescript_1.default.ModuleResolutionKind.NodeJs,
    module: typescript_1.default.ModuleKind.ES2015,
    suppressOutputPathCheck: true,
};
const defaultCodeCategories = {
    EMPTY_BUNDLE: diagnostics_1.DiagnosticCategory.Error,
    MISSING_EXPORT: diagnostics_1.DiagnosticCategory.Error,
    NAMESPACE_CONFLICT: diagnostics_1.DiagnosticCategory.Error,
    UNRESOLVED_IMPORT: diagnostics_1.DiagnosticCategory.Error,
};
const messageFormatter = {
    UNRESOLVED_IMPORT: w => `${w.source} is imported by ${w.importer}, but could not be resolved`,
};
function defaultFormatter(w) {
    if (Object.prototype.hasOwnProperty.call(w, 'toString'))
        return w.toString();
    return w.message;
}
const rollupWarningToDiagnostic = (codeCategories = defaultCodeCategories) => (warning) => {
    if (typeof warning === 'string') {
        return {
            category: diagnostics_1.DiagnosticCategory.Warning,
            messageText: warning,
        };
    }
    const { code } = warning;
    if (code === 'THIS_IS_UNDEFINED')
        return;
    let category = diagnostics_1.DiagnosticCategory.Warning;
    if (code && codeCategories[code])
        category = codeCategories[code];
    let formatter = defaultFormatter;
    if (code && messageFormatter[code])
        formatter = messageFormatter[code];
    let messageText = formatter(warning);
    if (warning.frame) {
        const context = {
            messageText: warning.frame,
            category: diagnostics_1.DiagnosticCategory.Message,
        };
        messageText = [{ messageText, category }, context];
    }
    return { messageText, category };
};
function conditionalPlugin(include, plugin) {
    return include ? [plugin] : [];
}
function compile(input, output, { external = [], allowUnknownExternals = false, onDiagnostic = diagnostics_1.logDiagnosticToConsole, }) {
    const convertRollupWarning = rollupWarningToDiagnostic(Object.assign({}, defaultCodeCategories, (allowUnknownExternals && { UNRESOLVED_IMPORT: diagnostics_1.DiagnosticCategory.Warning })));
    return rollupToVinyl_1.default(output, {
        external,
        input,
        plugins: [
            typescript_2.default({ onDiagnostic, tsconfigOverride }),
            resourceImports_1.default(),
            ...conditionalPlugin(sdkVersion_1.default().major < 2, rollup_plugin_json_1.default()),
            forbidAbsoluteImport_1.default(),
            ...conditionalPlugin(sdkVersion_1.default().major < 2, brokenImports_1.default()),
            rollup_plugin_node_resolve_1.default({ preferBuiltins: false }),
            rollup_plugin_commonjs_1.default({ include: ['node_modules/**'] }),
            rollup_plugin_babel_1.default({
                plugins: [
                    'transform-es2015-block-scoped-functions',
                    'transform-es2015-block-scoping',
                ],
                compact: false,
                babelrc: false,
            }),
        ],
        onwarn: (w) => {
            const diagnostic = convertRollupWarning(w);
            if (!diagnostic)
                return;
            onDiagnostic(diagnostic);
            if (diagnostic.category !== diagnostics_1.DiagnosticCategory.Error)
                return;
            throw new Error('Compile failed.');
        },
    }, {
        format: 'cjs',
        sourcemap: true,
    });
}
exports.default = compile;
