import pumpify from 'pumpify';
import { BuildTargetDescriptor } from './buildTargets';
import { ComponentType } from './componentTargets';
import { DiagnosticHandler } from './diagnostics';
import ProjectConfiguration from './ProjectConfiguration';
export declare function generateBuildId(): string;
export declare function loadProjectConfig({ onDiagnostic, fileName, }: {
    onDiagnostic?: DiagnosticHandler | undefined;
    fileName?: string | undefined;
}): ProjectConfiguration;
export declare function buildComponent({ projectConfig, component, onDiagnostic, }: {
    projectConfig: ProjectConfiguration;
    component: ComponentType;
    onDiagnostic?: DiagnosticHandler;
}): pumpify | undefined;
export declare function buildDeviceResources(projectConfig: ProjectConfiguration, { displayName, resourceFilterTag }: BuildTargetDescriptor, onDiagnostic?: DiagnosticHandler): pumpify;
export declare function buildDeviceComponents({ projectConfig, buildId, onDiagnostic, }: {
    projectConfig: ProjectConfiguration;
    buildId: string;
    onDiagnostic?: DiagnosticHandler;
}): pumpify[];
export declare function buildCompanion({ projectConfig, buildId, onDiagnostic, }: {
    projectConfig: ProjectConfiguration;
    buildId: string;
    onDiagnostic?: DiagnosticHandler;
}): pumpify | undefined;
export declare function buildAppPackage({ projectConfig, buildId, onDiagnostic, }: {
    projectConfig: ProjectConfiguration;
    buildId: string;
    onDiagnostic?: DiagnosticHandler;
}): pumpify;
export declare function build(onDiagnostic?: DiagnosticHandler): Promise<{}>;
