"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsonrpc_ts_1 = require("@fitbit/jsonrpc-ts");
var invariant = require("invariant");
var isBase64 = require("validator/lib/isBase64");
var types = require("./FDBTypes");
var BulkDataStream = (function () {
    function BulkDataStream(token, disposer, onWrite) {
        this.length = 0;
        this.data = [];
        this.token = token;
        this.disposer = disposer;
        this.onWrite = onWrite;
    }
    BulkDataStream.prototype.write = function (buffer) {
        this.data.push(buffer);
        this.length += buffer.length;
        if (this.onWrite)
            this.onWrite(buffer.length, this.length);
    };
    BulkDataStream.prototype.finalize = function () {
        this.disposer();
        return Buffer.concat(this.data);
    };
    return BulkDataStream;
}());
exports.BulkDataStream = BulkDataStream;
var BulkData = (function () {
    function BulkData() {
        var _this = this;
        this.streams = new Map();
        this.nextToken = 0;
        this.handleWrite = function (_a) {
            var token = _a.stream, data = _a.data, _b = _a.encoding, encoding = _b === void 0 ? 'base64' : _b;
            var stream = _this.getStream(token);
            if (encoding !== 'base64') {
                throw new jsonrpc_ts_1.InvalidParams('Unsupported encoding', { encoding: encoding });
            }
            if (!isBase64(data)) {
                throw new jsonrpc_ts_1.InvalidParams('Data is not valid for encoding', { encoding: encoding });
            }
            var buffer = Buffer.from(data, encoding);
            stream.write(buffer);
        };
    }
    BulkData.prototype.register = function (dispatcher) {
        dispatcher.method('io.write', types.IOWriteParams, this.handleWrite);
    };
    BulkData.prototype.getStream = function (token) {
        var stream = this.streams.get(token);
        if (stream !== undefined)
            return stream;
        throw new jsonrpc_ts_1.InvalidParams('Unknown bulk data stream', { stream: token });
    };
    BulkData.prototype.createWriteStream = function (onWrite) {
        var _this = this;
        var token = this.nextToken;
        this.nextToken += 1;
        invariant(!this.streams.has(token), 'Stream token already exists');
        var stream = new BulkDataStream(token, function () { return _this.streams.delete(token); }, onWrite);
        this.streams.set(token, stream);
        return stream;
    };
    return BulkData;
}());
exports.default = BulkData;
