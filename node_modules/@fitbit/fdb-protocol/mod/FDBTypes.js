import * as t from 'io-ts';
import * as isUUID from 'validator/lib/isUUID';
import * as semver from 'semver';
export var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes[ErrorCodes["HostNotInitialized"] = -32001] = "HostNotInitialized";
    ErrorCodes[ErrorCodes["MessageTooLong"] = -32002] = "MessageTooLong";
    ErrorCodes[ErrorCodes["ResponseTooLong"] = -32003] = "ResponseTooLong";
    ErrorCodes[ErrorCodes["RequestError"] = -1] = "RequestError";
})(ErrorCodes || (ErrorCodes = {}));
export var NonNegativeInteger = t.refinement(t.Integer, function (v) { return v >= 0; }, 'NonNegativeInteger');
export var PositiveInteger = t.refinement(t.Integer, function (v) { return v > 0; }, 'PositiveInteger');
export var ObjectURI = t.string;
export var AppFileURI = t.refinement(ObjectURI, function (s) { return s.startsWith('app:///'); }, 'AppFileURI');
export var Timestamp = t.number;
export var Semver = new t.Type('Semver', function (value) { return t.string.is(value) && semver.valid(value) !== null; }, function (value, context) { return t.string.validate(value, context).chain(function (str) {
    var version = semver.valid(str);
    return version === null ? t.failure(str, context) : t.success(version);
}); }, t.identity);
export var ReleaseSemver = t.refinement(Semver, function (s) { return semver.parse(s).prerelease.length === 0; }, 'ReleaseSemver');
export var Position = t.intersection([
    t.interface({
        source: AppFileURI,
        line: NonNegativeInteger,
        column: NonNegativeInteger,
    }),
    t.partial({
        generated: t.boolean,
        name: t.string,
    }),
], 'Position');
export var UUID = t.refinement(t.string, function (s) { return isUUID(s); }, 'UUID');
export var BuildID = t.refinement(t.string, function (s) { return /^[0-9a-fA-F]{16}$/.test(s); }, 'BuildID');
export var App = t.interface({
    uuid: UUID,
    buildID: BuildID,
}, 'App');
export var Component = t.union([t.literal('app'), t.literal('companion'), t.literal('settings')], 'Component');
export var AppComponent = t.intersection([App, t.interface({ component: Component })], 'AppComponent');
export var DeviceHost = t.partial({
    hostID: t.string,
}, 'DeviceHost');
export var InstalledApp = t.union([App, DeviceHost], 'InstalledApp');
export var InstalledAppComponent = t.union([AppComponent, DeviceHost], 'InstalledAppComponent');
export var ProtocolCapabilities = t.partial({
    batchRequest: t.boolean,
    maxMessageSize: PositiveInteger,
}, 'ProtocolCapabilities');
export var IOCapabilities = t.partial({
    write: t.boolean,
    additionalEncodings: t.array(t.string),
}, 'IOCapabilities');
export var ConsoleDebuggerCapabilities = t.partial({
    appLogging: t.boolean,
}, 'ConsoleDebuggerCapabilities');
export var DebuggerCapabilities = t.partial({
    protocol: ProtocolCapabilities,
    io: IOCapabilities,
    console: ConsoleDebuggerCapabilities,
    experimental: t.any,
}, 'DebuggerCapabilities');
export var InitializeParams = t.intersection([
    t.interface({
        capabilities: DebuggerCapabilities,
    }),
    t.partial({
        userAgent: t.string,
    }),
], 'InitializeParams');
export var APICompatibilityDescriptor = t.intersection([
    t.interface({
        maxAPIVersion: ReleaseSemver,
    }),
    t.partial({
        exactAPIVersion: t.array(Semver),
    }),
], 'APICompatibilityDescriptor');
export var AppHostDescriptor = t.intersection([
    t.partial({
        maxAPIVersion: ReleaseSemver,
        exactAPIVersion: t.array(Semver),
    }),
    t.interface({
        family: t.string,
        version: t.string,
    }),
], 'AppHostDescriptor');
export var CompanionHostDescriptor = APICompatibilityDescriptor;
export var ApplicationHostCapabilities = t.partial({
    install: t.partial({
        sideloadStream: t.boolean,
        appBundle: t.boolean,
        companionBundle: t.boolean,
        appCompatibility: t.array(AppHostDescriptor),
        companionCompatibility: CompanionHostDescriptor,
    }),
    launch: t.partial({
        appComponent: t.partial({
            canLaunch: t.boolean,
        }),
    }),
    screenshot: t.intersection([
        t.partial({
            stream: t.boolean,
        }),
        t.interface({
            imageFormats: t.array(t.string),
        }),
    ]),
}, 'ApplicationHostCapabilities');
export var HostCapabilities = t.partial({
    protocol: ProtocolCapabilities,
    io: IOCapabilities,
    appHost: ApplicationHostCapabilities,
    experimental: t.any,
}, 'HostCapabilities');
export var HostKind = t.union([
    t.literal('device'),
    t.literal('companion'),
]);
export var InitializeResult = t.intersection([
    t.interface({
        device: t.string,
        hostKind: HostKind,
        capabilities: HostCapabilities,
    }),
    t.partial({
        hostID: t.string,
    }),
], 'InitializeResult');
export var ConsoleMessageKind = t.union([
    t.literal('log'),
    t.literal('info'),
    t.literal('warn'),
    t.literal('error'),
]);
export var ConsoleMessage = t.intersection([
    t.partial({
        timestamp: Timestamp,
        position: Position,
        fromHost: t.boolean,
    }),
    t.interface({
        emittedBy: InstalledAppComponent,
        kind: ConsoleMessageKind,
        message: t.array(t.any),
    }),
], 'ConsoleMessage');
export var TraceMessageKind = t.union([
    t.literal('trace'),
    t.literal('assert'),
    t.literal('exception'),
]);
export var TraceMessage = t.intersection([
    t.interface({
        emittedBy: InstalledAppComponent,
        stack: t.array(Position),
        kind: TraceMessageKind,
        message: t.array(t.any),
    }),
    t.partial({
        timestamp: Timestamp,
    }),
], 'TraceMessage');
export var StreamToken = t.union([t.Integer, t.string], 'StreamToken');
export var StreamOpenResponse = t.interface({
    stream: StreamToken,
}, 'StreamOpenResponse');
export var StreamCloseParams = t.interface({
    stream: StreamToken,
}, 'StreamCloseParams');
export var IOWriteParams = t.intersection([
    t.interface({
        stream: StreamToken,
        data: t.string,
    }),
    t.partial({
        encoding: t.string,
    }),
], 'IOWriteParams');
export var ComponentBundleKind = t.union([
    t.literal('app'),
    t.literal('companion'),
]);
export var AppInstallStreamBeginParams = t.interface({
    componentBundle: ComponentBundleKind,
}, 'AppInstallStreamBeginParams');
export var AppInstallResult = t.interface({
    app: App,
    components: t.array(Component),
}, 'AppInstallResult');
export var LaunchComponentParams = t.interface({
    uuid: UUID,
    component: Component,
}, 'LaunchComponentParams');
export var AppScreenshotStreamCaptureParams = t.interface({
    stream: StreamToken,
    imageFormat: t.string,
}, 'AppScreenshotStreamCaptureParams');
export var AppScreenshotStreamCaptureResult = t.partial({
    length: NonNegativeInteger,
}, 'AppScreenshotStreamCaptureResult');
export var AppDebugEvalParams = t.interface({
    cmd: t.string,
}, 'AppDebugEvalParams');
export var AppDebugEvalValueResult = t.interface({
    success: t.literal(true),
    value: t.string,
}, 'AppDebugEvalValueResult');
export var AppDebugEvalFailureResult = t.interface({
    success: t.literal(false),
}, 'AppDebugEvalFailureResult');
export var AppDebugEvalResult = t.union([
    AppDebugEvalValueResult,
    AppDebugEvalFailureResult,
], 'AppDebugEvalResult');
